// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/brimsec/brimcap/analyzer (interfaces: ProcessWaiter)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProcessWaiter is a mock of ProcessWaiter interface.
type MockProcessWaiter struct {
	ctrl     *gomock.Controller
	recorder *MockProcessWaiterMockRecorder
}

// MockProcessWaiterMockRecorder is the mock recorder for MockProcessWaiter.
type MockProcessWaiterMockRecorder struct {
	mock *MockProcessWaiter
}

// NewMockProcessWaiter creates a new mock instance.
func NewMockProcessWaiter(ctrl *gomock.Controller) *MockProcessWaiter {
	mock := &MockProcessWaiter{ctrl: ctrl}
	mock.recorder = &MockProcessWaiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProcessWaiter) EXPECT() *MockProcessWaiterMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockProcessWaiter) Kill() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kill")
	ret0, _ := ret[0].(error)
	return ret0
}

// Kill indicates an expected call of Kill.
func (mr *MockProcessWaiterMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockProcessWaiter)(nil).Kill))
}

// Wait mocks base method.
func (m *MockProcessWaiter) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockProcessWaiterMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockProcessWaiter)(nil).Wait))
}
